// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'config.gradle'
buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 配置阶段开始前的监听回调
 */
beforeEvaluate {
    println("配置阶段开始执行...")
}

/**
 * 配置阶段执行完毕的监听回调
 */
afterEvaluate {
    println("配置阶段执行完毕...")
}

/**
 * gradle执行完毕的监听回调
 */
gradle.buildFinished {
    println("执行阶段执行完毕...")
}

/**
 * 等同于beforeEvaluate
 */
gradle.beforeProject {
    println("gradle.beforeProject")
}

/**
 * 等同于afterEvaluate
 */
gradle.afterProject {
    println("gradle.afterProject")
}

/**
 * project相关api，这里的代码只执行于配置阶段
 */
//getProjects()
//getSubProjects()
//getParentProject()
//getRootProj()
def getProjects() {
    println("----------------------------------")
    println("Root project")
    println("----------------------------------")

    getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println "Root project:'${project.name}'"
        } else {
            println "+--- project:'${project.name}'"
        }
    }
}

/**
 * 获取子project
 */
def getSubProjects() {
    println("----------------------------------")
    println("Sub project")
    println("----------------------------------")

    getSubprojects().each { project ->
        println "+--- project:'${project.name}'"
    }
}

/**
 * 获取父project
 */
def getParentProject() {
    def parentProject = getParent()
    if (parentProject == null) {
        return null
    }
    println("the parent project name is ${parentProject.name}")
}

def getRootProj() {
    def name = this.getRootProject().name
    println("the root project name is ${name}")
}

/**
 * 根project操作子project
 */
project("app") { appProject ->
    println("this project is '${appProject.name}'")
    println "this peoject's group is ${appProject.group}"
    //暂未发现group和version有何用处
//    group 'com.army'
//    version '1.0.0-release'
    //或者导入其他的插件
    apply plugin: 'com.android.application'
//    dependencies {
//        //依赖其他的库
//        implementation 'com.google.code.gson:gson:2.8.5'
//    }

    android {
        //可以加入其他的配置信息
    }
}

/**
 * 配置当前rootproject和subproject的所有project
 */
allprojects { project ->
    group 'com.army'
    version '1.0.0-release'

    if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin("com.android.application")) {
        dependencies {
            //依赖其他的库
            implementation 'com.google.code.gson:gson:2.8.5'
        }
    }
}

subprojects { project ->
    //不知道为什么，这里又不行了，提示找不到implementation或者compile
//    project.dependencies {
//        compile 'com.squareup.retrofit2:retrofit:2.4.0'
//    }
//    dependencies {
//        implementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    }
    if (project.plugins.hasPlugin('com.android.library')) {
        apply from: '../publishToMaven.gradle'
    }
}

//获取当前项目的路径，build文件夹的路径和根项目的路径
//allprojects {
//    println "getRootDir().absolutePath = ${rootDir.absolutePath}"
//    println "getBuildDir().absolutePath = ${buildDir.absolutePath}"
//    println "getProjectDir().absolutePath = ${projectDir.absolutePath}"
//    //使用file()方法获取传入的相对路径的文件对象，入参是相对于当前gradle所在项目的相对路径
//    //文件不存在也返回一个文件对象
//    println file("build")
//}

//文件的复制，使用自带的方法
//copy {
//    from project("app").projectDir.absolutePath + File.separator + "proguard-rules.pro"
//    into rootDir
//}

//文件夹的复制，不知道为何.gitignore文件复制不过去
//copy {
//    from(project("app").projectDir)
//    exclude("*.iml", "build/**")
//    //好像加了这句话就内部报错了，因为不执行复制了
////    include(".gitignore")
//    into buildDir
//    //重命名每个文件的名字
//    rename {
//        //这里的it是每个复制的文件的名字
//        println(it)
//    }
//}

//文件树的遍历
fileTree("app") { fileTree ->
    fileTree.visit { fileVisitDetail ->
//        println fileVisitDetail.name
//        println fileVisitDetail.file.absolutePath
    }
}

buildscript { ScriptHandler scriptHandler ->
    //配置我们工程的仓库地址
    scriptHandler.repositories { RepositoryHandler repositoryHandler ->
        //通常repositoryHandler.可以省略
        repositoryHandler.jcenter()
        repositoryHandler.mavenCentral()
        repositoryHandler.mavenLocal()
        //配置另外的maven地址
        repositoryHandler.maven {
            name "personal"
            url "http://39.108.120.100:8090/nexus/repository"
            //设置maven的账号密码，格式在credentials的注释里面有写
            credentials {
                username = "admin"
                password = "admin123"
            }
        }
    }

    //配置我们工程的插件的依赖地址
    scriptHandler.dependencies {
        //就因为引入了这句话，所以可以在module里面调用apply plugin: 'com.android.application'
        //或者apply plugin: 'com.android.library'
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}






